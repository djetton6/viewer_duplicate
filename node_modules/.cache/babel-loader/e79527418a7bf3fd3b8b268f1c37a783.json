{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Desmend Jetton\\\\Documents\\\\GitHub\\\\viewer_duplicate\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\Desmend Jetton\\\\Documents\\\\GitHub\\\\viewer_duplicate\\\\src\\\\app\\\\AppProvider.js\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nconst cc = require(\"cryptocompare\");\n\nexport const AppContext = React.createContext();\nconst MAX_FAVORITES = 12;\nconst TIME_UNITS = 12;\nexport class AppProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.fetchCoins();\n      this.fetchPrices();\n      this.fetchHistorical();\n    };\n\n    this.fetchCoins = async () => {\n      let coinList = (await cc.coinList()).Data;\n      this.setState({\n        coinList\n      });\n    };\n\n    this.fetchPrices = async () => {\n      if (this.state.firstVisit) return;\n      let prices = await this.prices(); // We must filter the empty price objects (not in the lecture)\n\n      prices = prices.filter(price => Object.keys(price).length);\n      this.setState({\n        prices\n      });\n    };\n\n    this.fetchHistorical = async () => {\n      if (this.state.firstVisit) return;\n      let results = await this.historical(); //parse for highCharts\n\n      let historical = [{\n        name: this.state.currentFavorite,\n        data: results.map((ticker, index) => [moment().subtract({\n          [this.state.timeInterval]: TIME_UNITS - index\n        }).valueOf(), ticker.USD])\n      }];\n      this.setState({\n        historical\n      });\n    };\n\n    this.prices = async () => {\n      let returnData = [];\n\n      for (let i = 0; i < this.state.favorites.length; i++) {\n        try {\n          let priceData = await cc.priceFull(this.state.favorites[i], \"USD\");\n          returnData.push(priceData);\n        } catch (e) {\n          console.warn(\"Fetch price error: \", e);\n        }\n      }\n\n      return returnData;\n    };\n\n    this.historical = () => {\n      let promises = [];\n\n      for (let units = TIME_UNITS; units > 0; units--) {\n        promises.push(cc.priceHistorical(this.state.currentFavorite, [\"USD\"], moment().subtract({\n          [this.state.timeInterval]: units\n        }).toDate()));\n      }\n\n      return Promise.all(promises);\n    };\n\n    this.addCoin = key => {\n      let favorites = [...this.state.favorites];\n\n      if (favorites.length < MAX_FAVORITES) {\n        favorites.push(key);\n        this.setState({\n          favorites\n        });\n      }\n    };\n\n    this.removeCoin = key => {\n      let favorites = [...this.state.favorites];\n      this.setState({\n        favorites: _.pull(favorites, key)\n      });\n    };\n\n    this.isInFavorites = key => _.includes(this.state.favorites, key);\n\n    this.confirmFavorites = () => {\n      let currentFavorite = this.state.favorites[0];\n      this.setState({\n        firstVisit: false,\n        page: \"dashboard\",\n        currentFavorite,\n        price: null,\n        historical: null\n      }, () => {\n        this.fetchPrices();\n        this.fetchHistorical();\n      });\n      localStorage.setItem(\"stockSapient\", JSON.stringify({\n        favorites: this.state.favorites,\n        currentFavorite\n      }));\n    };\n\n    this.setCurrentFavorite = sym => {\n      this.setState({\n        currentFavorite: sym,\n        historical: null\n      }, this.fetchHistorical);\n      localStorage.setItem(\"stockSapient\", JSON.stringify(_objectSpread({}, JSON.parse(localStorage.getItem(\"stockSapient\")), {\n        currentFavorite: sym\n      })));\n    };\n\n    this.setPage = page => this.setState({\n      page\n    });\n\n    this.setFilteredCoins = filteredCoins => this.setState({\n      filteredCoins\n    });\n\n    this.changeChartSelect = value => {\n      this.setState({\n        timeInterval: value,\n        historical: null\n      }, this.fetchHistorical);\n    };\n\n    this.state = _objectSpread({\n      page: \"dashboard\",\n      favorites: [\"BTC\", \"ETH\", \"XMR\", \"DOGE\"],\n      timeInterval: \"months\"\n    }, this.savedSettings(), {\n      setPage: this.setPage,\n      addCoin: this.addCoin,\n      removeCoin: this.removeCoin,\n      isInFavorites: this.isInFavorites,\n      confirmFavorites: this.confirmFavorites,\n      setCurrentFavorite: this.setCurrentFavorite,\n      setFilteredCoins: this.setFilteredCoins,\n      changeChartSelect: this.changeChartSelect\n    });\n  }\n\n  savedSettings() {\n    let stockSapientData = JSON.parse(localStorage.getItem(\"stockSapient\"));\n\n    if (!stockSapientData) {\n      return {\n        page: \"settings\",\n        firstVisit: true\n      };\n    }\n\n    let favorites = stockSapientData.favorites,\n        currentFavorite = stockSapientData.currentFavorite;\n    return {\n      favorites,\n      currentFavorite\n    };\n  }\n\n  render() {\n    return React.createElement(AppContext.Provider, {\n      value: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Desmend Jetton/Documents/GitHub/viewer_duplicate/src/app/AppProvider.js"],"names":["React","_","moment","cc","require","AppContext","createContext","MAX_FAVORITES","TIME_UNITS","AppProvider","Component","constructor","props","componentDidMount","fetchCoins","fetchPrices","fetchHistorical","coinList","Data","setState","state","firstVisit","prices","filter","price","Object","keys","length","results","historical","name","currentFavorite","data","map","ticker","index","subtract","timeInterval","valueOf","USD","returnData","i","favorites","priceData","priceFull","push","e","console","warn","promises","units","priceHistorical","toDate","Promise","all","addCoin","key","removeCoin","pull","isInFavorites","includes","confirmFavorites","page","localStorage","setItem","JSON","stringify","setCurrentFavorite","sym","parse","getItem","setPage","setFilteredCoins","filteredCoins","changeChartSelect","value","savedSettings","stockSapientData","render","children"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\n\r\nconst cc = require(\"cryptocompare\");\r\n\r\nexport const AppContext = React.createContext();\r\n\r\nconst MAX_FAVORITES = 12;\r\nconst TIME_UNITS = 12;\r\n\r\nexport class AppProvider extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      page: \"dashboard\",\r\n      favorites: [\"BTC\", \"ETH\", \"XMR\", \"DOGE\"],\r\n      timeInterval: \"months\",\r\n      ...this.savedSettings(),\r\n      setPage: this.setPage,\r\n      addCoin: this.addCoin,\r\n      removeCoin: this.removeCoin,\r\n      isInFavorites: this.isInFavorites,\r\n      confirmFavorites: this.confirmFavorites,\r\n      setCurrentFavorite: this.setCurrentFavorite,\r\n      setFilteredCoins: this.setFilteredCoins,\r\n      changeChartSelect: this.changeChartSelect\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.fetchCoins();\r\n    this.fetchPrices();\r\n    this.fetchHistorical();\r\n  };\r\n\r\n  fetchCoins = async () => {\r\n    let coinList = (await cc.coinList()).Data;\r\n    this.setState({ coinList });\r\n  };\r\n\r\n  fetchPrices = async () => {\r\n    if (this.state.firstVisit) return;\r\n    let prices = await this.prices();\r\n    // We must filter the empty price objects (not in the lecture)\r\n    prices = prices.filter(price => Object.keys(price).length);\r\n    this.setState({ prices });\r\n  };\r\n\r\n  fetchHistorical = async () => {\r\n    if (this.state.firstVisit) return;\r\n    let results = await this.historical();\r\n    //parse for highCharts\r\n    let historical = [\r\n      {\r\n        name: this.state.currentFavorite,\r\n        data: results.map((ticker, index) => [\r\n          moment()\r\n            .subtract({ [this.state.timeInterval]: TIME_UNITS - index })\r\n            .valueOf(),\r\n          ticker.USD\r\n        ])\r\n      }\r\n    ];\r\n    this.setState({ historical });\r\n  };\r\n\r\n  prices = async () => {\r\n    let returnData = [];\r\n    for (let i = 0; i < this.state.favorites.length; i++) {\r\n      try {\r\n        let priceData = await cc.priceFull(this.state.favorites[i], \"USD\");\r\n        returnData.push(priceData);\r\n      } catch (e) {\r\n        console.warn(\"Fetch price error: \", e);\r\n      }\r\n    }\r\n    return returnData;\r\n  };\r\n\r\n  historical = () => {\r\n    let promises = [];\r\n    for (let units = TIME_UNITS; units > 0; units--) {\r\n      promises.push(\r\n        cc.priceHistorical(\r\n          this.state.currentFavorite,\r\n          [\"USD\"],\r\n          moment()\r\n            .subtract({ [this.state.timeInterval]: units })\r\n            .toDate()\r\n        )\r\n      );\r\n    }\r\n    return Promise.all(promises);\r\n  };\r\n\r\n  addCoin = key => {\r\n    let favorites = [...this.state.favorites];\r\n    if (favorites.length < MAX_FAVORITES) {\r\n      favorites.push(key);\r\n      this.setState({ favorites });\r\n    }\r\n  };\r\n\r\n  removeCoin = key => {\r\n    let favorites = [...this.state.favorites];\r\n    this.setState({ favorites: _.pull(favorites, key) });\r\n  };\r\n\r\n  isInFavorites = key => _.includes(this.state.favorites, key);\r\n\r\n  confirmFavorites = () => {\r\n    let currentFavorite = this.state.favorites[0];\r\n    this.setState(\r\n      {\r\n        firstVisit: false,\r\n        page: \"dashboard\",\r\n        currentFavorite,\r\n        price: null,\r\n        historical: null\r\n      },\r\n      () => {\r\n        this.fetchPrices();\r\n        this.fetchHistorical();\r\n      }\r\n    );\r\n    localStorage.setItem(\r\n      \"stockSapient\",\r\n      JSON.stringify({\r\n        favorites: this.state.favorites,\r\n        currentFavorite\r\n      })\r\n    );\r\n  };\r\n\r\n  setCurrentFavorite = sym => {\r\n    this.setState(\r\n      {\r\n        currentFavorite: sym,\r\n        historical: null\r\n      },\r\n      this.fetchHistorical\r\n    );\r\n    localStorage.setItem(\r\n      \"stockSapient\",\r\n      JSON.stringify({\r\n        ...JSON.parse(localStorage.getItem(\"stockSapient\")),\r\n        currentFavorite: sym\r\n      })\r\n    );\r\n  };\r\n\r\n  savedSettings() {\r\n    let stockSapientData = JSON.parse(localStorage.getItem(\"stockSapient\"));\r\n    if (!stockSapientData) {\r\n      return { page: \"settings\", firstVisit: true };\r\n    }\r\n    let { favorites, currentFavorite } = stockSapientData;\r\n    return { favorites, currentFavorite };\r\n  }\r\n  setPage = page => this.setState({ page });\r\n\r\n  setFilteredCoins = filteredCoins => this.setState({ filteredCoins });\r\n\r\n  changeChartSelect = value => {\r\n    this.setState(\r\n      { timeInterval: value, historical: null },\r\n      this.fetchHistorical\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AppContext.Provider>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}